# verify the class name and assign genomes and tit(le)

if type(Class,list(symbol)) then 
     genomes := Class;
     tit := string( seq( i[1], i=genomes ) );
     h := mod( sum(hashstring(z),z=genomes), 2^30 );
     Class := Special . h;
elif member(Class,{'Archaea','Bacteria','Eukaryota'}) then
     tit := 'All ' . Class . 'l genomes';
     genomes := [ seq( If(GS[i,Kingdom]=Class,i,NULL),i=genomes ) ];
elif Class = 'All' then
     tit := 'All genomes';
     genomes := [ seq( If(i[1] <> 'm',i,NULL), i=genomes )]
elif Class = 'Microbia' then
     tit := 'All Bacteria and Archaebacteria genomes';
     genomes := [ seq( If( GS[i,Kingdom]='Bacteria' or
        GS[i,Kingdom]='Archaea', i,NULL), i=genomes ), GUITH ]
elif Class = 'Unicellular' then
     tit := 'All Unicellular genomes';
     genomes := [ seq( If( GS[i,Kingdom]='Bacteria' or
        GS[i,Kingdom]='Archaea' or GS[i,Kingdom]='Eukaryota' and
        not member( GS[i,Lineage,2], {'Viridiplantae','Metazoa'} ),
            i,NULL), i=genomes ) ]
elif Class = 'NonPlants' then
     tit := 'All kingdoms exluding plants';
     genomes := [ seq( If( GS[i,Lineage,2] <> 'Viridiplantae',i,NULL),
	i=genomes ) ]
elif Class = 'Vertebrates' then
     tit := 'Vertebrates';
     genomes := [ seq( If( length(GS[i,Lineage]) > 9 and
	GS[i,Lineage,9] = 'Vertebrata',i,NULL), i=genomes ) ];
elif Class = 'OtherBacteria' then
     tit := 'Other Bacteria';
     genomes := [ seq( If(GS[i,Kingdom]='Bacteria' and
	not member( GS[i,Lineage,2], {'Firmicutes','Proteobacteria',
		'Cyanobacteria','Actinobacteria'}),i,NULL), i=genomes ) ];
elif Class = 'ArchaeaThermotogae' then
     tit := 'Archaea and Thermotogae';
     genomes := [ seq( If( GS[i,Lineage,1]='Archaea' or
	GS[i,Lineage,2]='Thermotogae', i,NULL), i=genomes ) ];
elif Class = OtherEukaryota then
     tit := 'Eukaryota excluding Metazoa';
     genomes := [ seq( If( i <> 'GUITH' and GS[i,Kingdom]='Eukaryota' and
	GS[i,Lineage,2] <> 'Metazoa', i,NULL), i=genomes ), CAEEL ];
elif Class = OtherProteobacteria then
     tit := 'Other Proteobacteria';
     genomes := [ seq( If(member('Proteobacteria',GS[i,Lineage]) and
        not member('Gammaproteobacteria',GS[i,Lineage]),i,NULL), i=genomes )];
elif Class = GreatApes then
     tit := 'Great Apes';
     genomes := [ seq( If( member(Hominidae,GS[i,Lineage]),i,NULL), i=genomes)];
elif Class = Firmicutes89 then
     tit := '89 most different Firmicutes';  # minimum distance MD=5
     genomes := [BACSU, ENTFA, SYMTH, CLOTE, STRMU, OCEIH, LACJO, CLOAB, BACHD,
	THETN, LACPL, STAEQ, STRT1, BACLD, BACSK, LACAC, STRA3, STAHJ, STAS1,
	CARHZ, LACSS, LACS1, LACDA, SYNWW, DESHY, CLOP1, CLONN, LACBA, LEUMM,
	OENOB, LACLM, MOOTA, STRSV, CLOD6, CLOTH, GEOTN, PEDPA, ALKMQ, ALKOO,
	LACRJ, CLOB8, BACA2, CLOPH, LACH4, STAA2, EXIS2, CLOK5, BACCN, NATTJ,
	CALS8, BACP2, LYSSC, PELTS, DESAP, DESRM, FINM2, HELMI, LEUCK, THEPX,
	CLOBA, LACF3, LACCB, COPPD, ANATD, HALOH, CLOCE, STRS7, BACC7, MACCJ,
	BREBN, GEOSW, EUBE2, STRDG, ANAPD, STACT, STRU0, STRPJ, EXISA, PAESJ,
	ALIAD, CLOBJ, DESAS, GEOSY, EUBR3, GEOS4, LACRG, LISM2, STRS4, STRG3]
elif Class = Proteobacteria265 then
     tit := '265 most different Proteobacteria';  # minimum distance MD=4.75
     # on Thu Mar 10 10:04:01 CET 2011 from OtherProteobacteriaMar08 and
     #	GammaproteobacteriaDec19
     genomes :=
[ACEP3,ACIAC,ACIAD,ACIBY,ACICJ,ACIF2,ACISJ,ACTP7,ACTSZ,AERHH,AGGAD,AGGAN,AGRRK,
AGRT5,AGRVS,ALCBS,ALHEH,ALISL,ALTMD,ANADF,ANAMM,ANAPZ,ANASK,ARCB4,AZOC5,AZOSB,
AZOSE,AZOVD,BARBK,BARGA,BARHE,BARQU,BART1,BAUCH,BDEBA,BEII9,BLOFL,BLOPB,BORA1,
BORBR,BORPD,BRAJA,BRASB,BRASO,BRUMC,BUCAI,BUCAP,BUCBP,BUCCC,BURCH,BURGB,BURP0,
BURP8,BURXL,CAMC1,CAMC5,CAMFF,CAMHC,CAMJE,CAMLR,CARRP,CAUCN,CAUSK,CELJU,CHRSD,
CHRVO,CITRI,COLP3,COXBN,DECAR,DELAS,DESAA,DESAH,DESDG,DESMR,DESOH,DESPS,DESVH,
DESVM,DICDC,DICNV,DICZE,DINSH,ECOLI,EDWI9,EHRCJ,EHRCR,EHRRW,ENT38,ENTS8,ERWCT,
ERWT9,ERYLH,FRAP2,FRATN,GEOLS,GEOMG,GEOSF,GEOSL,GEOSM,GEOUR,GLUDA,GLUOX,GRABC,
HAEDU,HAEI8,HAEPS,HAES2,HAHCH,HALHL,HAMD5,HELAH,HELHP,HELPB,HERAR,HIRBI,HYPNA,
IDILO,JANMA,JANSC,KLEP3,LARHH,LAWIP,LEGLN,LEGPA,LEPCP,MAGSA,MAGSM,MANSM,MARAV,
MARMM,MARMS,MESSB,METCA,METED,METFK,METML,METNO,METPB,METPP,METRJ,METS4,METSB,
METSD,MYXXD,NAUPA,NEIMA,NEORI,NEOSM,NITEC,NITEU,NITHX,NITMU,NITOC,NITSB,NITWN,
NOVAD,OCHA4,OLICO,ORITI,PARDP,PARL1,PASMU,PELCD,PELPD,PELUB,PHEZH,PHOAA,PHOLL,
PHOPR,POLNA,POLNS,POLSJ,POLSQ,PROMH,PSEA6,PSEAB,PSEF5,PSEFS,PSEHT,PSEMY,PSEPF,
PSEPG,PSEU2,PSEU5,PSYCK,PSYIN,PSYWF,PUNMI,RALEH,RALEJ,RALME,RALP1,RALSO,RHIEC,
RHIL3,RHILO,RHIME,RHISN,RHOCS,RHOFD,RHOP2,RHOP5,RHOPB,RHOPS,RHOPT,RHORT,RHOS1,
RHOS5,RICAH,RICBR,RICCK,RICFE,RICTY,ROSDO,RUTMC,SACD2,SALTY,SERP5,SHEAM,SHEB9,
SHEDO,SHEFN,SHELP,SHEPA,SHEPW,SHESA,SHESH,SHEWM,SILPO,SILST,SINMW,SODGM,SORC5,
SPHAL,SPHWW,STRMK,SULD5,SULDN,SULNB,SYNAS,SYNFM,TERTT,THASP,THICR,THIDA,THISH,
VEREI,VESOH,VIBC3,VIBFM,VIBPA,VIBSL,VIBVY,WIGBR,WOLPP,WOLSU,WOLTR,WOLWR,XANC5,
XANCP,XANP2,XYLF2,YERE8,ZYMMO]
elif Class = Rand then
     tit := 'Random selection of genomes';
     genomes := Shuffle(genomes)[1..round(length(genomes)/5)];
elif type(Class,posint..posint) then
     if Class[2] > length(genomes) then
	error(Class,'is an invalid genome range') fi;
     tit := 'genomes from ' . Class[1] . ' to ' . Class[2];
     genomes := genomes[Class];
     Class := GenomeRange.Class[1].'_'.Class[2];
elif type(Class,Random(string,posint)) then
     tit := Random.Class[1].Class[2];
     genomes := [ seq( If( member(Class[1],GS[i,Lineage]) and
	GS[i,Lineage,1] <> 'Mitochondria', i, NULL), i=genomes ) ];
     if length(genomes) > Class[2] then
	genomes := Shuffle(genomes)[1..Class[2]] fi;
     Class := tit;
elif type(Class,Largest(posint)) then
     tit := '' . (Class[1]) . ' largest genomes';
     genomes := sort( genomes, x -> GS[x,TotAA] )[-Class[1]..-1];
     Class := Largest_ . (Class[1]);
elif Class = SmallArchaea then
     genomes := [ seq( If( GS[i,Lineage,1]=Archaea, i, NULL), i=genomes ) ];
     genomes := sort( genomes, x -> GS[x,TotAA] )[1..20];
     tit := 'Smallest 20 Archaea';
elif type(Class,Smallest(posint)) then
     tit := '' . (Class[1]) . ' smallest genomes';
     genomes := sort( genomes, x -> GS[x,TotAA] )[1..Class[1]];
     Class := Smallest_ . (Class[1]);
else # assume the Class is a valid term in Lineage
     tit := 'All ' . Class;
     genomes := [ seq( If( member(Class,GS[i,Lineage]) and
	GS[i,Lineage,1] <> 'Mitochondria', i, NULL), i=genomes ) ];
     if length(genomes) < 4 then
	lprint( Class, 'produces too few hits:', genomes );
	quit
     fi;
fi;

if ExcludePlasmids=true then PlasmidEntries;  tit := tit . ' (no plasmids)'
else PlasmidEntries := table({}) fi:
printf( '%s contains %d genomes: %a\n', tit, length(genomes), genomes );

