module external DetectParallelInfo, ParallelInfo, ParallelInfo_print:

ParallelInfo := proc(NrParallelProc:posint, ProcNr:posint)
    return(noeval(procname(args))):
end:
ParallelInfo_print := proc(pinf) option internal;
    printf('I am job nr %d of %d\n', pinf['ProcNr'], pinf['NrParallelProc']);
end:
CompleteClass(ParallelInfo):

LSF_Platform := proc()
    jobidx := getenv('LSB_JOBINDEX');
    # if not a jobarray, assume single process and warn user.
    if jobidx='' then 
        jobidx:=1;
        NrParallelProc := 1;
        warning('not run as job-array. Will assume it is a single process.');
    else
        jobidx := parse(jobidx);
        jobId := getenv('LSB_JOBID');
        jobsum := TimedCallSystem('bjobs -A '.jobId);
        if jobsum[1]<>0 then 
            error('cannot call ''bjobs'' command successfully'); 
        fi:
        jobsumTab := [seq(SearchDelim('\t',trim(l)), l=jobsum[2])];
        NrParallelProc := parse(jobsumTab[2,4]);
    fi:
    return(ParallelInfo(NrParallelProc, jobidx));
end:

SunGrid_Platform := proc()
    jobidx := getenv('SGE_TASK_ID');
    # if not a jobarray, assume single process and warn user.
    if jobidx='' then 
        jobidx:=1;
        NrParallelProc := 1;
        warning('not run as job-array. Will assume it is a single process.');
    else
        jobidx := parse(jobidx);
        # TODO: find out how to compute NrOfParallelJobs
        NrParallelProc := -1;
    fi:
    return(ParallelInfo(NrParallelProc, jobidx));
end:

DetectParallelInfo := proc()
    if getenv('LSF_JOBID')<>'' then
        return(LSF_Platform());
    elif getenv('SGE_ROOT')<>'' then
        return(SunGrid_Platform());
    elif type(NR_PROCESSES,posint) then
        if not type(THIS_PROC_NR,posint) then 
            error('oma standalone is not propperly started. bye.');
        fi:
        return(ParallelInfo(NR_PROCESSES,THIS_PROC_NR));
    else 
        return(ParallelInfo(1,1));
    fi:
end:

end: #module
