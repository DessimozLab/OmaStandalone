

####################################################
# Read the latest version of an Orthologous Matrix #
####################################################
ReadLatestMatrix := proc( prefix:string )
global MatrixFileName;
# select most recent file from the Matrix directory
fn := TimedCallSystem( 'ls -t ' . wdir . 'Matrix/' . prefix . '* | head -1' ):
if fn[1] <> 0 or length(fn[2]) < 5 then error('cannot find file',fn) fi;
if fn[2,-4..-2] = '.gz' then fname := fn[2,1..-5] else fname := fn[2,1..-2] fi:
printf( '# reading %s\n', fname );
ReadProgram( fname );
if length(genomes) <> length(Orthologous[1]) then
     error('non-matching number of genomes')
elif Class <> prefix then
     error(Class,prefix,'names do not coincide')
fi;
MatrixFileName := fname;
end:


##############################################################
# Read or Build an Orthologous Matrix based on given genomes #
##############################################################
ReadOrBuildMatrix := proc( gens:list(symbol) )
global BestDimlessTree, BestTreeDists, BestTreeVars;
BestDimlessTree := noeval(BestDimlessTree);
BestTreeDists := noeval(BestTreeDists);
BestTreeVars := noeval(BestTreeVars);

h := mod( sum(hashstring(z),z=gens), 2^30 );
ClassName := Special . h;
r := traperror(ReadLatestMatrix( ClassName ));
if r = lasterror then
    if {op(gens)} minus {op(genomes)} = {} then
	 # write the Matrix file directly
	 if not type(Orthologous,matrix) or
	    length(Orthologous[1]) <> length(genomes) then
	    error('Orthologous matrix not correct') fi;
	 map := [ seq(SearchArray(z,genomes),z=gens) ];
	 histog := CreateArray(1..length(gens));
	 for z in Orthologous do
	     t := sum( If( z[i]>0, 1, 0 ), i=map );
	     if t > 1 then histog[t] := histog[t]+1 fi
	 od:
	 t0 := sum(histog);  t1 := sum(i*histog[i],i=1..length(gens));
	 MmmDD := TimedCallSystem( 'date +%b%d' )[2,1..5];
	 OpenWriting( wdir . 'Matrix/' . ClassName . MmmDD );
	 printf( 'ProteinsInGroups := %d:\n', t1 );
	 if type(params,list(positive)) then
	      printf( 'params := %A:\n', params ) fi;
	 printf( 'genomes := %a:\n', gens );
	 printf( 'histog := %a:\n', histog );
	 printf( 'Class := %s:\n', ClassName );
	 printf( 'tit := ''Special OG matrix derived from larger, %s, %d species, %d orthologs'':\n',
	     date(), length(gens), t0 );
	 printf( '_M := Orthologous := CreateArray(1..%d,1..%d):  i := 0:\n',
	     t0, length(gens) );
	 for z in Orthologous do
	     t := sum( If( z[i]>0, 1, 0 ), i=map );
	     if t > 1 then
		 printf( 'i:=i+1:' );
		 for i to length(map) do if z[map[i]]>0 then
		     printf( '_M[i,%d]:=%d:', i, z[map[i]] )
		 fi od;
		 printf( '\n' );
	     fi
	 od:
	 printf( 'TopOGpercentage := 2:\n' );
	 OpenWriting( previous );
    else
         printf( 'ReadOrBuildMatrix: building matrix with %d genomes\n',
	     length(gens) );
         CallSystem( sprintf( 'echo "Class:=%a: ReadProgram(''Phase4.drw'');"',
	     gens ) .  ' | /home/darwin/v2/source/darwin64' );
         ReadLatestMatrix( ClassName );
         OpenAppending( MatrixFileName );
         printf( 'TopOGpercentage := 2:\n' );
         OpenWriting( previous );
    fi;
    CallSystem( 'TreeMaker.scr ' . ClassName );
    ReadLatestMatrix( ClassName );
fi:
if not type(BestDimlessTree,Tree) then
     error(ClassName,'does not contain a phylogenetic tree')
elif not type(BestTreeDists,matrix(numeric)) then
     error(ClassName,'does not contain a distance matrix')
elif not type(BestTreeVars,matrix(numeric)) then
     error(ClassName,'does not contain a variance matrix')
elif max(BestTreeDists) > 300 then
     error(ClassName,'maximum interspecies distance', max(BestTreeDists),
	'is too large' )
fi;
SpeciesClass( gens, BestDimlessTree, BestTreeDists, BestTreeVars,
	MatrixFileName ):
end:
