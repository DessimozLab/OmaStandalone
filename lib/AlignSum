#
#	AlignSum - Alignment summary information
#
AlignSum := proc( Entry1:posint, Entry2:posint,
        Score:positive, PamDistance:positive,
        Range1:posint..posint, Range2:posint..posint,
        PamVariance:positive, Gen1:posint, Gen2:posint,
	Other:anything
        ) option NoIndexing, polymorphic;
if nargs < 9 or nargs > 10 then error('incorrect number of fields')
else noeval(procname(args)) fi end:

AlignSum_print := proc( a:AlignSum ) print(Alignment(a)) end:

AlignSum_Alignment := proc( a:AlignSum )
global DB, dbs;
if not type(dbs,list) then dbs := CreateArray(1..N) fi;
if dbs[a[Gen1]]=0 then
     dbs[a[Gen1]] := ReadDb( GenomeFileName[genomes[a[Gen1]]] )
else DB := dbs[a[Gen1]] fi;
s1 := Sequence(Entry(a[Entry1]));
if dbs[a[Gen2]]=0 then
     dbs[a[Gen2]] := ReadDb( GenomeFileName[genomes[a[Gen2]]] )
else DB := dbs[a[Gen2]] fi;
s2 := Sequence(Entry(a[Entry2]));
Alignment( s1[a[Range1]], s2[a[Range2]], a[Score],
	SearchDayMatrix(a[PamDistance],DMS), a[PamDistance],
	a[PamVariance], {Local} );
end:

AlignSum_type := noeval({
    AlignSum(posint, posint, positive, positive, posint..posint,
	posint..posint, positive, posint, posint, anything),
    AlignSum(posint, posint, positive, positive, posint..posint, posint..posint,
	positive, posint, posint)}):

CompleteClass(AlignSum);

