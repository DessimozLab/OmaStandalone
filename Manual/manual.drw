Set(printgc=false);

# Some helpers: Link element to create links in HTML and LaTeX

Link := proc(t:TextBlock)
    noeval(Link(args)):
end:

Link_type := noeval(structure(TextBlock, Link)):

Link_string := proc(l:Link)
    return(string(l[1])):
end:

Link_HTMLC := proc(l:Link)
    return(HTMLC(l[1])):
end:

Link_LaTeXC := proc(l:Link)
    li := DocEl('href', l[1,2,2]):
    tx := '{'.l[1,3].'}':
    return(LaTeXC(li).tx):
end:

# Anchor element to create anchors (HTML) and labels (LaTeX)
# Usage: 
# Set an anchor: Anchor('a', name='somewhere', 'some element'):
# Use an anchor: Anchor('a', href='somewhere', 'some element'):

Anchor := proc(t:TextBlock)
    if t[1] <> 'a' then
        error('only "a" tags allowed as anchors'):
    fi:
    noeval(Anchor(args)):
end:

Anchor_type := noeval(structure(TextBlock, Anchor)):

Anchor_string := proc(a:Anchor)
    return(string(a[1])):
end:

Anchor_HTMLC := proc(a:Anchor)
    if a[1,2,1] = 'name' then
        return(HTMLC(a[1])):
    elif a[1,2,1] = 'href' then
        a[1,2,2] := '#'.a[1,2,2]:
        return(HTMLC(a[1])):
    fi:
end:

Anchor_LaTeXC := proc(a:Anchor)
    if a[1,2,1] = 'name' then
        return(LaTeXC(a[1,3]) . LaTeXC(DocEl('label', a[1,2,2]))):
    elif a[1,2,1] = 'href' then
        return(LaTeXC(a[1,3]) . LaTeXC(DocEl('ref', a[1,2,2]))):
    fi:
end:


##############################################################################
# Here comes the content


# If you want to use a 'fixed' tarball name, change 'binaryName' accordingly;
# otherwise, the name of the tarball is created by using the current version
# tag in the git repo.
currentVersion := TimedCallSystem('git describe')[2, 1..-2]:
binaryName := 'OMA.'.currentVersion.'.tgz':
binaryLink := 'http://omabrowser.org/standalone/'.binaryName:
folderName := ConcatStrings(SearchDelim('.', binaryName)[1..-2], '.'):

# PAGETITLE
pagetitle := 'OMA stand-alone':

# INTRO
intro := [  Anchor(TextBlock('a', name='introduction', 
                SectionHeader(1, 'Introduction')
            )),
            Paragraph(0, 'You can download and install OMA as a stand-alone
            version. Included are the algorithms for OMA itself plus its 
            addition ESPRIT. The software can be installed on Linux (x86, 
            both 64bit and 32bit) and MacOSX (x86, both 32bit and 64bit).'),
            
            Paragraph(0, 'For background info on OMA, 
            please refer to the OMA browser page:'), 
            
            Paragraph(0, Link(TextBlock('a', 
                href='http://omabrowser.org/Algorithm.html',
                'http://omabrowser.org/Algorithm.html'))),
                
            Paragraph(0, 'For background info on ESPRIT, 
            please refer to this article:'), 
            
            Paragraph(0, Link(TextBlock('a', 
                href='http://dx.doi.org/10.1093/bib/bbr038',
                'http://dx.doi.org/10.1093/bib/bbr038'))),
            
            Paragraph(0, 'If you have specific questions about the installation 
            or the usage of OMA, please contact 
            {adrian or cdessimoz}@inf.ethz.ch .')
        ]:

downloads := [ Anchor(TextBlock('a', name='downloads',
                    SectionHeader(1, 'Downloads')
                )),
                Paragraph(0, 'The current version of OMA stand-alone can be 
                found here:'),
                
                Paragraph(0, Link(TextBlock('a',href=binaryLink, binaryName)))
            ]:

# INSTALL
install := [
            Anchor(TextBlock('a', name='installation', SectionHeader(1, 'Installation'))),

            Paragraph(0, 'You do not need to install OMA stand-alone on your
            system; the script will also run if you just call it by using 
            the complete path to ', TT('bin/oma'), ' in the installer folder. 
            But we still encourage you to run the installer script, since it 
            makes working with OMA considerably more convenient.'),

            Paragraph(0, 'To install OMA stand-alone on your system, download
            the installer, untar the package and run the included installer
            script:'),
            
            Paragraph(0, 
                Code('curl '.binaryLink.' -o oma.tgz
tar xvzf oma.tgz
cd '.folderName.'
./install.sh /your/install/prefix'
                )
            ),
            
            Paragraph(0, 'If you do not choose an install prefix, OMA will be 
            installed in ', TT('/usr/local/OMA'), ' (for this, you might need 
            to install it using the root account or ', TT('sudo'), ').'), 
            
            Paragraph(0, 'After installation, make sure the ', TT('bin'), 
            ' folder of OMA is in your ', TT('PATH'), ' variable, e.g., if
            you are using bash and used ', TT('/your/install/prefix'), ' as
            installer prefix, add a line in ', TT('~/.profile'), ' such as:')
            ]:

# latex uses $ for math, need to escape...
linstall := [op(install), 
                Paragraph(0, 
                    Code('export PATH=\\$PATH:/your/install/prefix/OMA/bin')
                )
            ]:
# HTML has no problem with this
hinstall := [op(install), 
                Paragraph(0, 
                    Code('export PATH=$PATH:/your/install/prefix/OMA/bin')
                )
            ]:

addinstp := Paragraph(0, 'For other shells, choose the appropriate syntax.'):

linstall := append(linstall, addinstp):
hinstall := append(hinstall, addinstp):

# USAGE
usage := [ Anchor(TextBlock('a', name='usage', SectionHeader(1, 'Usage'))),
        Paragraph(0, 'First, set up a working directory. Copy the file ', 
        TT('parameters.drw'), ' into this folder and change it to your needs. 
        Create a directory ', TT('DB'), ' in your working directory that holds 
        the genome data in FASTA format (see "File formats") and copy your 
        data into this directory. If you want to use ESPRIT, the FASTA file 
        containing the contigs should be called ',TT('{YourGenome}.contig.fa'),
        '. Then, simply call ', TT('OMA'), ' from your working directory to 
        run OMA and/or ESPRIT'),

        Paragraph(0, 'If you have not installed OMA yet, use the complete
        path to ', TT('bin/oma'), ' in the installer folder to start the
        script.'),

        
        Paragraph(0, 'As an example, assume you installed ', TT('OMA'), ' in ',
        TT('/your/install/prefix'), ' and want to use ESPRIT on two genome 
        files and one file with contigs (all in ', TT('/home/you/fasta'), 
        ', do something like this:'),
        
        Paragraph(0,
            Code('# create working directory
mkdir myWorkingDir
cd myWorkingDir
# create DB directory in working directory
mkdir DB
# copy FASTA files into DB directory
cp /home/you/fasta/yourFirstGenomeFile.fa DB/
cp /home/you/fasta/yourSecondGenomeFile.fa DB/
cp /home/you/fasta/yourContigFile.contig.fa DB/
cp /your/install/prefix/OMA/'.folderName.'/parameters.drw ./
# adjust parameters
vim parameters.drw
# run OMA
oma')),
        
        Paragraph(0, 'To get a first impression of ', TT('OMA'), ' you 
        could ', TT('cd'), ' into the ', TT('ToyExample'), ' directory, 
        have a look at ', TT('parameters.drw'), ' and run ', TT('OMA'),
        ' to process our example files.'),
        
        Anchor(TextBlock('a', name='parallelization', 
            SectionHeader(2, 'Parallelization'))
        ),

        Paragraph(0, 'The all-against-all phase of OMA is the most time-',
        'consuming one, but it can be parallelized (unlike all other steps, ',
        'which cannot run in parallel). The way it works is that the ',
        'parameter "NP" and the ',
        'total number of genomes (n) will determine into how many chunks the ',
        'all-against-all phase is divided. If NP=1, there will be n*(n-1)/2 ',
        'parts, if NP is higher, there will be more (shorter) jobs.'),
        
        Paragraph(0, 'Now, scheduling is straightforward: all compute 
        processes ',
        'need to start from the same directory, and will try to do all the ',
        'chunks sequentially. However, before starting a new chunk, each ',
        'process ensures that it has not yet been claimed/processed by another 
        ',
        'process (i.e. no result file yet exists).'),
        
        Paragraph(0, 'Therefore, there is not need to specify which parts are 
        to be done by which process. One should only ensure that all processes 
        start from a shared directory, such that each chunk gets 
        computed by a single process only.'
        ),

        Anchor(TextBlock('a', name='LSF', 
            SectionHeader(3, 'Parallelization with LSF'))
        ),
        Paragraph(0, 'With LSF, running parallel jobs is particularly easy,
        as the parallel jobs can be start using as a job array. To minimize
        the risk of collision, we recommend adding a small, variable delay
        before starting each job, e.g.'),

        Paragraph(0, 
            Code('bsub -J "OMA[1-100]" -o "out.%I" "sleep \$LSB_JOBINDEX && oma"')
            ),

        Paragraph(0, 'which starts 100 processes in parallel, with at 
            least one second delay between each of them.'),

        Anchor(TextBlock('a', name='Adding/Updating new genomes', 
            SectionHeader(2, 'Adding/Updating new genomes'))
        ),
        Paragraph(0, 'It is possible to add new genomes without recomputing 
        the all-against-all phase for pre-existing genomes. To do so, simply
        add the new fasta databases in the DB/ directory and re-run OMA.
        Likewise, it is possible to update a genome by deleting the old genome
        from the DB/ directory, and adding a new file. ', Bold('Important: '), 
        'to avoid clashes with previously computed results, the updated genome 
        must use a different filename than the any previously computed 
        result.') 
        ,
        
        NULL]:

# INPUT FORMATS
iformat := [ 
            Anchor(TextBlock('a', name='iformat', 
                SectionHeader(2, 'Input Files'))
            ),
            Paragraph(0, 'OMA uses two different input formats: FASTA files for 
            genome input and a Darwin file for parameter input.'),
            
            Paragraph(0, 'The Fasta format is explained in detail on ',
                Link(
                    TextBlock('a', 
                        href='http://en.wikipedia.org/wiki/FASTA_format',
                        'wikipedia'
                    )
                ), '.'
            ),
            
            Paragraph(0, 'As almost everywhere else, OMA uses the greater-than 
            symbol ">" to distinguish labels from sequences. Each sequence 
            in an MSA is supposed to have its own label. Have a look at the 
            FASTA files included in ToyExample/DB in our installer package for 
            some example files.'),
            
            Paragraph(0, 'If you want to use ESPRIT, make sure that FASTA files
            containing contigs are called ', TT('{YourGenome}.contig.fa'), '.
            So if you want to experiment with some mouse genome, call the 
            FASTA file ', TT('mouse.contig.fa'), ' or ', 
            TT('mymouse.contig.fa'), ' or something similar.'),
            
            Paragraph(0, 'Parameter files use Darwin syntax.  Key-value-pairs 
            are written as'),
            
            Paragraph(0, Code('key := value;')),
            
            Paragraph(0, 'Note the colon in ', TT(':='), ' and the semicolon at 
            the end of the line. If your parameter file does not use valid 
            Darwin syntax, OMA will print out a short message and stop its 
            execution.')
            ]:

# OUTPUT FORMATS
oformat := [ Anchor(TextBlock('a', name='oformat',
                SectionHeader(2, 'Output Files')
            )),
            Anchor(TextBlock('a', name='omaout',
                SectionHeader(3, 'OMA Output')
            )),
            
            Paragraph(0, 'The output of OMA gets written to files stored in 
            a directory ', TT('Output'), ' in your working directory. There are 
            text files and directories organized as described in Table 1.'),
            
            Table( hastitlerow, ColAlign('l', 'p{10cm}'),
                    title = 'Table 1: Contents of the OMA output files',
                    Row(Bold('Filename or Directory'), Bold('Contents')),
                    Rule,
                    Row(TT('Map-SeqNum-ID.txt'), 
                        Paragraph(0, 'Lists all genes of all datasets  
                    with their unique sequence number and the labels read from
                    the FASTA files.')),
                    Row(TT('OrthologousGroups.txt'), 
                        Paragraph(0, 'The groups of orthologs are
                    given as one per row, starting with a unique group
                    identifier, followed by all group members, all separated
                    by tabs.')),
                    Row(TT('OrthologousMatrix.txt'), 
                        Paragraph(0, 'More compact version of ',
                    TT('OrthologousGroups.txt'), '. The groups of orthologs
                    are given as matrix with group per row and one genome
                    per tab-separated column. Numbers refer to entry number as
                    listed in the file ', TT('Map-SeqNum-ID.txt'), '.')),
                    Row(TT('PairwiseOrthologs/'), 
                    Paragraph(0, 'Each OMA group is provided as a separate
                    Fasta file, with the species name as identifer. This
                    format is particularly suitable as starting point for
                    a phylogenetic reconstruction.')),
                    Row(TT('OrthologousGroupsFasta/'), 
                    Paragraph(0, 'Each OMA group is provided as a separate
                    Fasta file, with the species name as identifer. This
                    format is particularly suitable as starting point for
                    a phylogenetic reconstruction.')),
                    Row(TT('HierarchicalGroups.orthoxml'), 
                    Paragraph(0, 'The hierarchical groups of orthologs
                    in OrthoXML format. A detailed description of how
                    these groups are computed is forthcoming.')),
                    Row(TT('EstimatedSpeciesTree.nwk'), 
                    Paragraph(0, 'The inferred species tree on which 
                    the hierarchical groups inference procedure is based,
                    in Newick format.'))

            ) ,
            
            Paragraph(0, 'The textfiles in ', TT('Output/PairwiseOrthologs'), 
            ' are named according to ', TT('{genome a}-{genome b}.txt'),
            ' and consist of a list of pairwise orthologs for the two given
            genomes. Every pair is listed only once, and in no particular
            order. Each line in the file contains one pair; all fields are 
            separated by tabs. In the first two field, the unique IDs of the
            proteins are given. The next two fields contain the labels of
            the proteins, and in the last two fields, the type of orthology
            and (if any) the OMA group is given.'),

            Anchor(TextBlock('a', name='espritout',
                SectionHeader(3, 'ESPRIT Output')
            )),
            
            Paragraph(0, 'ESPRIT stores its output files in a directory called',
            TT('EspritOutput'), ' in your working directory. The output
            consists of three text files and one tarball. In the tarball,
            FASTA files with the MSAs of the hits ESPRIT found are stored.
             The other three files are explained in detail in Table 2.'),
            
            Table( hastitlerow, ColAlign('l', 'p{12cm}'),
                title = 'Table 2: Contents of the ESPRIT output files',
                Row(Bold('Filename'), Bold('Contents')),
                Rule,
                Row(TT('params.txt'),
                    Paragraph(0, 'This file is kept as a reference and 
                    contains all parameters used in the current run.')),
                Row(TT('hits.txt'),
                    Paragraph(0, 'All hits found by ESPRIT are listed in this
                    file. It is a list of contigs, ordered according to their
                    position relative to the putative ortholog. Each line 
                    describes one contig, the fields are separated by tabs.
                    In the first field, the fragment pair ID is printed; the
                    next two fields contain the labels of the first and
                    second fragments found in this hit. The forth and fifth 
                    fields contain the label of the corresponding full gene
                    and its genome name. Then follows the distance difference
                    between the two fragments and the number of positions
                    between them (i.e. the gap); at last, an array is listed
                    containing the IDs of all s3 genes corresponding to this
                    hit.')),
                Row(TT('dubious.txt'),
                    Paragraph(0, 'ESPRIT often detects more candidate pairs than
                    it will list in the ', TT('hits.txt'), ' file, but not all
                    of them survive the quality check. Still, if you want to
                    see which triplets have been filtered out, have a look at ',
                    TT('dubious.txt'), ' where they are still listed. The file
                    format is the same as for ', TT('hits.txt'), '.'))
            )
            ]:

# PARAMETERS
parameters := [ Anchor(TextBlock('a', name='parameters',
                    SectionHeader(1, 'Parameters')
                )),
                
                Paragraph(0, 'All parameters for OMA and/or ESPRIT are
                set in a parameters file. There is an example file in the
                OMA installer package; we encourage you to copy this file
                into your working directory and change it to your needs.'),
                Paragraph(0, 'The parameter file consists of two main parts:
                First, general parameters for OMA are set; see Table 3 for
                detailed explanations. Second, more specific parameters 
                that only affect the ESPRIT algorithm can be changed. 
                These parameters are explained in Table 4.
                Note that changing the ESPRIT parameters
                will not have an effect unless you set the boolean variable ',
                TT('UseEsprit'), ' to ', TT('true'), '.'),
                
                Table( hastitlerow, ColAlign('l', 'p{9cm}', 'p{2cm}'),
                    title = 'Table 3: General parameters in OMA',
                    Row(Bold('Parameter'), Bold('Meaning'), Bold('Default')),
                    Rule,
                    Row(TT('ReuseCachedResults'), 
                        Paragraph(0, 'If you want to recompute everything from
                        scratch everytime the script is run, set this to ',
                        TT('false'), '.'),
                        TT('true')),
                    Row(TT('NP'),
                        Paragraph(0, 'In the all-against-all phase, each genome
                        pair is split in ',TT('NP'), 'parts. This allows for 
                        shorter milestone steps (e.g. in case of computer 
                        crash) and allows to parallelize jobs with few but 
                        large genomes.'),
                        TT(4)),
                    Row(TT('MinScore'), 
                        Paragraph(0, 'Alignments which have a score lower than ',
                        TT('MinScore'), ' will not be considered. The scores
                        are in Gonnet PAM matrices units.' ),
                        TT('181')),
                    Row(TT('LengthTol'), 
                        Paragraph(0, 'Length tolerance ratio. If the length of
                        the effective alignment is less than ', 
                        TT('LengthTol'), ' * min( length(s1), length(s2) ), then 
                        the alignment is not considered.'),
                        TT('0.61')),
                    Row(TT('StablePairTol'), 
                        Paragraph(0, 'During the stable pair formation, if a
                        pair has a distance provable higher than another pair
                        (i.e. ', TT('StablePairTol'), ' standard deviations
                        away) then it is discarded.'),
                        TT('1.81')),
                    Row(TT('VerifiedPairTol'), 
                        Paragraph(0, 'Tolerance parameter for the detection of 
                        differential gene losses using a third genome. The larger 
                        the tolerance, the liberaler the algorithm assigns 
                        orthologous relations. A detailed description is provided ',
                        Link(TextBlock('a', 
                           href='http://nar.oxfordjournals.org/content/34/11/3309.full', 
                           'here.'))),
                        TT('1.53')),
                    Row(TT('MinSeqLen'),
                        Paragraph(0, 'Any sequence which is less than ',
                        TT('MinSeqLen'), ' amino acids long in regular genomes
                        is not considered.'),
                        TT('50')),
                    Row(TT('StableIdsForGroups'),
                        Paragraph(0, 'Enables/disables the generation of stable identifiers for OMA groups 
                        (and Hierarchical Groups if their computation enabled). The identifier consists of 
                        a prefix to determine the type of the group (''OMA'' or ''HOG''), and a subsequence
                        of the amino acid sequence uniquely present in this group. The computation of these 
                        ids might require a substantial amount of time. The ids are stored in the OrthoXML
                        files only.'),
                        TT('false')),
                    Row(TT('DoHierarchicalGroups'),
                       Paragraph(0, 'Enables/disables the computation of the 
                       hierarchical groups. This steps requires substantial 
                       computating power.'), 
                       TT('true')),
                    Row(TT('MaxTimePerLevel'),
                       Paragraph(0, 'Define maximum umount of time (in sec) spent by 
                       the program for breaking every connected component of the 
                       orthology graph at its weakest link on a given taxonomic level. 
                       If set to a negative value, no timelimit is enforced.'),
                       TT('1200')),
                    Row(TT('SpeciesTree'),
                       Paragraph(0, 'The hierarchical groups require a (partially)
                       resolved species phylogeny. With the parameter ',
                       TT('SpeciesTree'), ' the user can specify 
                       a phylogeny in Newick-format, or, by setting the variable 
                       to "estimate", compute a species tree based on the OMA 
                       Groups and use this one.'), 
                       TT('estimate')),
                    Row(TT('ReachabilityCutoff'),
                       Paragraph(0,'The cutoff of "average reachability within 
                       two steps" defines up to what point a cluster is split 
                       into sub-clusters.'), 
                       TT('0.65'))
                ),
                Table( hastitlerow, ColAlign('l', 'p{9cm}', 'p{2cm}'),
                    title = 'Table 4: ESPRIT parameters',
                    Row(Bold('Parameter'), Bold('Meaning'), Bold('Default')),
                    Rule,
                    Row(TT('UseEsprit'), 
                        Paragraph(0, 'You can either set this to ', TT('true'),
                        ', which will enable ESPRIT and shut down the parts of
                        OMA that are not directly needed for ESPRIT, or set it
                        to ', TT('false'), ' to make no use of ESPRIT at all.'),
                        TT('false')),
                    Row(TT('DistConfLevel'),
                        Paragraph(0, 'Confidence level variable for contigs.
                        This is the parameter ', TT('tol'), ' described in the
                        paper.'),
                        TT('2')),
                    Row(TT('MinProbContig'),
                        Paragraph(0, 'Minimal proportion of genomes with which
                        contigs form many:1 BestMatches to consider that we
                        might be dealing with fragments of the same gene.
                        This is the parameter ', TT('MinRefGenomes'), 
                        ' described in the paper, normalized by the total
                        number of reference genomes.'),
                        TT('0.4')),
                    Row(TT('MaxContigOverlap'),
                        Paragraph(0, 'Maximum overlap between fragments of
                        same gene from different contigs.'),
                        TT('5')),
                    Row(TT('MinSeqLenContig'),
                        Paragraph(0, 'Any sequence which is less than ',
                        TT('MinSeqLenContig'), ' amino acids long in contigs
                        is not considered.'),
                        TT('20')),
                    Row(TT('MinBestScore'),
                        Paragraph(0, 'Minimum best score for BestMatch in
                        scaffold recognition.'),
                        TT('250'))
                )
                ]:

# LICENSE
license := [ Anchor(TextBlock('a', name='license',
                SectionHeader(1, 'License')
            )),
            
            Paragraph(0, 'OMA standalone is licensed under the Mozilla 
Public License Version 2.0. For more info, please consult the following page:'),
            
            Paragraph(0,Link(
                TextBlock('a',
                href='http://www.mozilla.org/MPL/2.0/',
                'http://www.mozilla.org/MPL/2.0/')
            )),
            
            Paragraph(0, 'In a nutshell, OMA standalone is open source and 
free for commercial and non-commercial use.'),

            Paragraph(0, 'Software distributed under the License is 
distributed on an "AS IS" basis,WITHOUT WARRANTY OF ANY KIND, either 
express or implied. See the License for the specific language governing 
rights and limitations under the License.')


            ]:


# JAVASCRIPTS FOR GOOGLE
googlejs1 := TextBlock('script', type='text/javascript',
  'var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
   document.write(unescape("%3Cscript src=''" + gaJsHost + "google-analytics.com/ga.js'' type=''text/javascript''%3E%3C/script%3E"));'
   ):
googlejs2 := TextBlock('script', type='text/javascript',
            'try {
       var pageTracker = _gat._getTracker("UA-1093824-1");
        pageTracker._trackPageview();
	 } catch(err) {}'
            ):


# CONTENT TABS FOR HTML
htmltabs := TextBlock('div', class='navigation',
                Anchor(TextBlock('a', href='introduction', 'Introduction')),
                ' - ',
                Anchor(TextBlock('a', href='downloads', 'Downloads')),
                ' - ',
                Anchor(TextBlock('a', href='installation', 'Installation')),
                ' - ',
                Anchor(TextBlock('a', href='usage', 'Usage')),
                ' - ',
                Anchor(TextBlock('a', href='fileformats', 'File formats')),
                ' - ',
                Anchor(TextBlock('a', href='parameters', 'Parameters')),
                ' - ',
                Anchor(TextBlock('a', href='license', 'License')),
                ' - ',
                Link(TextBlock('a', href='http://omabrowser.org', 'Omabrowser'))
            ):


##############################################################################
# create and write the documents
#

# Create one section 'File Formats'
formats := [ Anchor(TextBlock('a', name='fileformats',
                SectionHeader(1, 'File Formats')
             )),
                op(iformat),
                op(oformat)
            ]:

# LaTeX output
OpenWriting('Manual/manual.tex'):
    prints('% Do not modify this file. It has been automatically ');
    prints('% created from manual.drw');
    prints( LaTeXC(DocEl('documentclass', 'scrartcl') ) ):
    prints( LaTeXC(DocEl('usepackage', 'hyperref') ) ):
    prints( LaTeXC(DocEl('hypersetup', 'colorlinks,
citecolor=blue,
filecolor=blue,
linkcolor=blue,
urlcolor=blue') ) ):
    prints( '\\renewcommand*{\\figureformat}{}
\\renewcommand*{\\tableformat}{}
\\renewcommand*{\\captionformat}{}' );
    prints( LaTeXC(DocEl('title', pagetitle)) . '\n' ):
    prints( LaTeXC(DocEl('author', 'CBRG, ETHZ')) . '\n' ):
    prints( LaTeXC(DocEl('date', '')) . '\n' ):
    prints( '\\renewcommand{\\familydefault}{\\sfdefault}' ):
    prints( LaTeXC(DocEl('begin', 'document')) . '\n' ):
    prints( '\\maketitle\n' ):
    prints( '\\tableofcontents\n' ):
    prints( LaTeXC( Document( 
        op(intro),
        op(downloads),
        op(linstall),
        op(usage),
        op(formats),
        op(parameters),
        op(license)
    ) ) ):
    prints( LaTeXC( DocEl('end', 'document')) . '\n' ):
OpenWriting( previous ):
# Create PDF: call pdflatex twice to make sure toc gets built
CallSystem('cd Manual && pdflatex manual.tex'):
CallSystem('cd Manual && pdflatex manual.tex'):


# HTML output

omabrowsercss := TextBlock('link', href='../browser.css',
            rel='stylesheet', type='text/css'):

additionalcss := TextBlock('link', href='manual.css',
            rel='stylesheet', type='text/css'):


OpenWriting('Manual/manual.html'):
    prints(HTML(Document(
            googlejs1,
            googlejs2,
            TextBlock('div', class='content',
                TextBlock('div', class='title', pagetitle),
                htmltabs,
                op(intro),
                op(downloads),
                op(hinstall),
                op(usage),
                op(formats),
                op(parameters),
                op(license)
            )
        ), pagetitle, css1=omabrowsercss, css2=additionalcss, title=false)):
OpenWriting(previous):

done
