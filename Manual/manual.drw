Set(printgc=false);

# Some helpers: Link element to create links in HTML and LaTeX

Link := proc(t:TextBlock)
    noeval(Link(args)):
end:

Link_type := noeval(structure(TextBlock, Link)):

Link_string := proc(l:Link)
    return(string(l[1])):
end:

Link_HTMLC := proc(l:Link)
    return(HTMLC(l[1])):
end:

Link_LaTeXC := proc(l:Link)
    li := DocEl('href', l[1,2,2]):
    tx := '{'.l[1,3].'}':
    return(LaTeXC(li).tx):
end:

# Anchor element to create anchors (HTML) and labels (LaTeX)
# Usage: 
# Set an anchor: Anchor('a', name='somewhere', 'some element'):
# Use an anchor: Anchor('a', href='somewhere', 'some element'):

Anchor := proc(t:TextBlock)
    if t[1] <> 'a' then
        error('only "a" tags allowed as anchors'):
    fi:
    noeval(Anchor(args)):
end:

Anchor_type := noeval(structure(TextBlock, Anchor)):

Anchor_string := proc(a:Anchor)
    return(string(a[1])):
end:

Anchor_HTMLC := proc(a:Anchor)
    if a[1,2,1] = 'name' then
        return(HTMLC(a[1])):
    elif a[1,2,1] = 'href' then
        a[1,2,2] := '#'.a[1,2,2]:
        return(HTMLC(a[1])):
    fi:
end:

Anchor_LaTeXC := proc(a:Anchor)
    if a[1,2,1] = 'name' then
        return(LaTeXC(a[1,3]) . LaTeXC(DocEl('label', a[1,2,2]))):
    elif a[1,2,1] = 'href' then
        return(LaTeXC(a[1,3]) . LaTeXC(DocEl('ref', a[1,2,2]))):
    fi:
end:


##############################################################################
# Here comes the content


# If you want to use a 'fixed' tarball name, change 'binaryName' accordingly;
# otherwise, the name of the tarball is created by using the current version
# tag in the git repo.
currentVersion := TimedCallSystem('git describe')[2, 1..-2]:
binaryName := 'OMA.'.currentVersion.'.tgz':
binaryLink := 'https://omabrowser.org/standalone/'.binaryName:
folderName := ConcatStrings(SearchDelim('.', binaryName)[1..-2], '.'):

# PAGETITLE
pagetitle := 'OMA standalone':

# INTRO
intro := [  Anchor(TextBlock('a', name='introduction', 
                SectionHeader(1, 'Introduction')
            )),

            Paragraph(0, 'The OMA (Orthologous MAtrix) database is a leading
            resource for identifying orthologs, that are homologous genes 
            started diverging through a speciation event, among publicly 
            available complete genomes. Orthologs are essential for many 
            applications in molecular biology, including gene function 
            prediction or species tree reconstruction.'),

            Paragraph(0, 'OMA standalone is a standalone package that can infer 
            orthologs with the OMA algorithm for custom genomes. It is possible 
            to export genomes and their homology relations directly from the 
            OMA web-browser and combine them with custom genomes or proteomes.'),

            Paragraph(0, 'OMA standalone computes pairwise orthologs and constructs
            from those two different types of groupings, the OMA Groups and 
            Hierarchical Orthologous Groups (HOGs). Furthermore, OMA standalone 
            can predict gene function annotations using Gene Ontology terms 
            based on existing annotations from exported genomes, and produces 
            phyletic profiles for OMA Groups and HOGs. See section ', 
            Anchor(TextBlock('a', href='applications', 'Possible applications')),
            ' for some further explanations how to use the output of OMA standalone.'),

            Paragraph(0, 'You can run OMA as a standalone program on your own 
            computer or HPC cluster. Included are the algorithms for OMA itself 
            plus its addition ESPRIT - a tool based on OMA to detect split genes. 
            The software can be run on Linux (x86, both 64bit and 32bit) and 
            MacOSX (x86, both 32bit and 64bit).'),
            
            Paragraph(0, 'For a short summary and pointers to detailed algorithmic 
            publications of OMA, please refer to the OMA browser page:'), 
            
            Paragraph(0, Link(TextBlock('a', 
                href='https://omabrowser.org/oma/about/',
                'https://omabrowser.org/oma/about/'))),
                
            Paragraph(0, 'For background info on ESPRIT, 
            please refer to this article:'), 
            
            Paragraph(0, Link(TextBlock('a', 
                href='http://dx.doi.org/10.1093/bib/bbr038',
                'http://dx.doi.org/10.1093/bib/bbr038'))),
            
            Paragraph(0, 'If you have specific questions about the installation 
            or the usage of OMA, please contact 
            adrian.altenhoff ', IT('at'),' inf.ethz.ch or christophe.dessimoz ',
            IT('at'),' unil.ch.')
        ]:

downloads := [ Anchor(TextBlock('a', name='downloads',
                    SectionHeader(1, 'Downloads')
                )),
                Paragraph(0, 'The current version of OMA standalone can be 
                found here:'),
                
                Paragraph(0, Link(TextBlock('a',href=binaryLink, binaryName))),
                Paragraph(0, 'See the ', 
                    Link(TextBlock('a',href='release_notes.txt', 'release notes')), 
                    ' to get an overview of recent function improvements and bug fixes.'),
                Paragraph(0, 
                    Link(TextBlock('a', href='previous_releases.html', 'Previous releases')),
                    ' of OMA standalone are still available for download.')
            ]:

# INSTALL
install := [
            Anchor(TextBlock('a', name='installation', SectionHeader(1, 'Installation'))),

            Paragraph(0, 'You do not need to install OMA standalone on your
            system; the script will also run if you just call it by using 
            the complete path to ', TT('bin/oma'), ' in the installer folder. 
            But we still encourage you to run the installer script, since it 
            makes working with OMA considerably more convenient.'),

            Paragraph(0, 'To install OMA standalone on your system, download
            the installer, untar the package and run the included installer
            script:'),
            
            Paragraph(0, 
                Code('curl '.binaryLink.' -o oma.tgz
tar xvzf oma.tgz
cd '.folderName.'
./install.sh /your/install/prefix'
                )
            ),
            
            Paragraph(0, 'If you do not choose an install prefix, OMA will be 
            installed in ', TT('/usr/local/OMA'), ' (for this, you might need 
            to install it using the root account or ', TT('sudo'), ').'), 
            
            Paragraph(0, 'After installation, make sure the ', TT('bin'), 
            ' folder of OMA is in your ', TT('PATH'), ' variable, e.g., if
            you are using bash and used ', TT('/your/install/prefix'), ' as
            installer prefix, add a line in ', TT('~/.profile'), ' such as:'),

            Paragraph(0, Code('export PATH=$PATH:/your/install/prefix/OMA/bin')),

            Paragraph(0, 'For other shells, choose the appropriate syntax.'),
            SectionHeader(2, 'Homebrew/Linuxbrew'),  
            Paragraph(0, 'Alternatively, OMA standalone is also available on ',
            IT('Homebrew'), ' and ', IT('Linuxbrew'),'. To install 
            OMA standalone with Homebrew or Linuxbrew make sure you have 
            installed the respective package and then run ', 
            Code('brew tap brewsci/bio
brew install oma'))]:

# USAGE
usage := [ Anchor(TextBlock('a', name='usage', SectionHeader(1, 'Usage'))),
        Paragraph(0, 'First, set up a working directory. Copy the file ', 
        TT('parameters.drw'), ' into this folder (if you installed OmaStandalone,
        you can alternatively run ', TT('OMA -p'), ' to get the parameter file
        with default values) and change it to your needs. 
        Create a directory ', TT('DB'), ' in your working directory that holds 
        the genome data in FASTA format (see "File formats") and copy your 
        data into this directory. If you want to use ESPRIT, the FASTA file 
        containing the contigs should be called ',TT('{YourGenome}.contig.fa'),
        '. Then, simply call ', TT('OMA'), ' from your working directory to 
        run OMA or ESPRIT'),

        Paragraph(0, 'If you have not installed OMA yet, use the complete
        path to ', TT('bin/oma'), ' in the installer folder to start the
        script.'),

        
        Paragraph(0, 'As an example, assume you installed ', TT('OMA'), ' in ',
        TT('/your/install/prefix'), ' and want to use ESPRIT on two genome 
        files and one file with contigs (all in ', TT('/home/you/fasta'), 
        ', do something like this:'),
        
        Paragraph(0,
            Code('# create working directory
mkdir myWorkingDir
cd myWorkingDir
# create DB directory in working directory
mkdir DB
# copy FASTA files into DB directory
cp /home/you/fasta/yourFirstGenomeFile.fa DB/
cp /home/you/fasta/yourSecondGenomeFile.fa DB/
cp /home/you/fasta/yourContigFile.contig.fa DB/
cp /your/install/prefix/OMA/'.folderName.'/parameters.drw ./
# adjust parameters
vim parameters.drw
# run OMA
OMA')),
        
        Paragraph(0, 'To get a first impression of ', TT('OMA'), ' you 
        could ', TT('cd'), ' into the ', TT('ToyExample'), ' directory, 
        have a look at ', TT('parameters.drw'), ' and run ', TT('OMA'),
        ' to process our example files.'),

        Anchor(TextBlock('a', name='commandlineoptions', 
            SectionHeader(2, 'Command-line options'))),
        Paragraph(0, 'OMA standalone has a few commandline options you can set. 
        The available options together with a brief description is available using 
        the "-h" option, i.e. ',TT('OMA -h'),
        Code('OMA -h\n'.ReplaceString('''', '''''', trim(TimedCallSystem('bin/oma -h')[2])))),
        
        Anchor(TextBlock('a', name='parallelization', 
            SectionHeader(2, 'Parallelization'))
        ),

        Paragraph(0, 'The all-against-all phase of OMA is the most time-',
        'consuming one, but it can be parallelized (unlike all other steps, ',
        'which cannot run in parallel). The way it works is that the ',
        'parameter "AlignBatchSize" and the ',
        'total number of genomes (n) will determine into how many chunks the ',
        'all-against-all phase is divided. AlignBatchSize will split the n*(n-1)/2 ',
        'genome pairs further into chunks of at most "AlignBatchSize" alignments. ',
        'The larger AlignBatchSize is, the more and smaller jobs will be executed.'),
        
        Paragraph(0, 'Scheduling is straightforward: all compute 
        processes ',
        'need to start from the same directory, and each one will try to do an equal 
        amount of ',
        'chunks sequentially. However, before starting a new chunk, each ',
        'process ensures that it has not yet already been processed by another ',
        'process (i.e. no result file yet exists).'),
        Paragraph(0, 'On a single computer with multiple processors and/or cores, ',
        'it is recomended to start "N" parallel processes with the "-n" option, i.e.',
        Code('OMA -n 5'), 
        ' will start 5 parallel jobs. Note that on HPC with schedulers there is a ',
        'better way described ', Anchor(TextBlock('a', href='schedulers', 'below'))),
        
        Paragraph(0, 'Therefore, there is not need to specify which parts are 
        to be done by which process. One should only ensure that all processes 
        start from a shared directory, such that each chunk gets 
        computed by a single process only.'
        ),

        Anchor(TextBlock('a', name='schedulers', 
            SectionHeader(3, 'Parallelization with LSF, PBS Pro, Slurm, or SunGridEngine'))
        ),
        Paragraph(0, 'With a scheduler such as LSF, SGE or Slurm, running parallel jobs is particularly easy,
        as the parallel jobs can be start using as a job array. OMA will 
        automatically spread the work for the all-against-all among all processes.
        For a brief discussion on the required resources refer to the section ',
        Anchor(TextBlock('a', href='resources', 'below')), '
        Do not start OMA with the -n option for that. Instead, use a job 
        array with one of the supported schedulers below (the example is to 
        start 100 jobs in parallel).'),

        Paragraph(0, Color(red, 'New in 2.0: '), 'The user should now explicitly set the number of
        total processes that should run in the job array. This is done by setting the environment
        variable ',TT('''NR_PROCESSES''.'),' E.g. in bash/tcsh use', 
Code('export NR_PROCESSES=100  # bash
setenv NR_PROCESSES 100  # tcsh'), 
        ' prior to submitting the job. The main advantage of this new form is that single jobs 
        can be more easily resubmitted, and very large job arrays that do not all run simultaneously 
        will work more reliably.'),

        Anchor(TextBlock('a', name='LSF', SectionHeader(3, 'LSF'))),

        Paragraph(0, 
            Code('export NR_PROCESSES=100
bsub -J "OMA[1-$NR_PROCESSES]" -o "out.%I" "OMA"')),

        Anchor(TextBlock('a', name='SGE', SectionHeader(3, 'Sun Grid Engine (aka Oracle Grid Engine)'))),

        Paragraph(0, 
            Code('export NR_PROCESSES=100
qsub -t 1-$NR_PROCESSES "OMA"')
        ),

        Anchor(TextBlock('a', name='PBSPro', SectionHeader(3, 'PBS Pro'))),

        Paragraph(0, 'Prepare a job script called e.g. job.sh:', Code('
\#!/bin/bash
\# set the number of nodes and processes per node
\#PBS -l select=1:ncpus=1:mem=1000mb
\# set max wallclock time
\#PBS -l walltime=01:00:00
\#PBS -J 1-100
export NR_PROCESSES=100
OMA'), 'The script can then be submitted as follows:', 
        Code('qsub job.sh')
        ),

        Anchor(TextBlock('a', name='Slurm', SectionHeader(3, 'Slurm'))),

        Paragraph(0, Code('sbatch --array=1-100 -N1 <<EOF
\#!/bin/sh 
export NR_PROCESSES=100
/absolute/path/to/bin/OMA
EOF')
        ),

        Anchor(TextBlock('a', name='resources', 
            SectionHeader(2,'Required Resources'))
        ),
        
        Paragraph(0, 'Depending on the dataset to be analysed, OMA can require
        quite a significant amount of computational resources, i.e. RAM and cpu
        time. Most computing time is spent to compute the all-against-all
        sequence alignments, which is why this part has been parallelized.
        Although cpu intensive this phase does not require too much memory. As
        a rule of thumb you can assume it requires roughly 10 times the size of
        your DB folder, but at minimum 650MB. The second part of OMA runs sequential on a single
        core, but it requires a lot more memory: Asymptotically it grows quadratic 
        in the number of genomes. From a few real data runs we estimated that as a rule of thumb,
        you should count with ', TT('400MB * pow(nr_genomes, 1.4)'),'. Obviously this
        depends also a lot on the size of your genomes. 60 metazoas have been
        successfully computed using 120GB, and for the same number of bacterial
        genomes, 50GB were reported to be enough.'), 
        
        Paragraph(0, 'Because of this imbalance regarding the required memory
        the OMA starter script has command line option ',TT('-s'), ' to run
        only the first part of the OMA pipeline. Using this option, the
        computation can be split into a parallel phase with little memory 
        requirement , and a single process requiring a lot more RAM. Running 
        the OMA thus becomes a two stage process like this:', Code('
# first stage, little memory:
OMA -s 

# once first stage terminated, run second stage
OMA'), 'Note that this staging is mostly useful on computing clusters where 
        often memory and cpu time has to be reserved at job submission.'
        ),

        Anchor(TextBlock('a', name='Adding/Updating new genomes', 
            SectionHeader(2, 'Adding/Updating new genomes'))
        ),
        Paragraph(0, 'It is possible to add new genomes without recomputing 
        the all-against-all phase for pre-existing genomes. To do so, simply
        add the new fasta databases in the DB/ directory and re-run OMA.
        Likewise, it is possible to update a genome by deleting the old genome
        from the DB/ directory, and adding a new file. ', Bold('Important: '), 
        'to avoid clashes with previously computed results, the updated genome 
        must use a different filename than any previously computed 
        result.'),
 
        Anchor(TextBlock('a', name='advanced optimisations', 
            SectionHeader(2, 'Advanced usages of OMA standalone'))
        ),
        Paragraph(0, 'In this section we collect a few ideas to push the limits of 
        OMA standalone.'),
 
        Anchor(TextBlock('a', name='maximum time', 
            SectionHeader(3, 'Specifying the maximum amount of computing time'))
        ),
        Paragraph(0, 'Often it is desirable to have many short jobs than a few
        long running ones, especially in a HPC environment. There, usually each
        job is limited to a certain amount of time, where short jobs usually 
        get a higher priority assigned. With the ', TT('-W'), ' command line 
        option, one can inform OMA of the maximum amount of time (in seconds) it should use
        before exiting in a clean way. Once this time limit is reached, OMA terminates
        with an exit value of 99, which can be used on many schedulers to re-queue the job
        automatically. On LSF, you can use for example -Q "99", SGE (if not deactivated
        by the cluster configurations) will reschedule jobs automatically. The ',
        Bold('exit code has changed in release 2.3'), ' in order to support the
        SGE platform more easily.'),
        Paragraph(0, 'Sensible values for ',TT('-W'), ' are usually between 3600
        (1 hour) or higher. Note that this flag does not replace any resource
        allocation option from the scheduler.'),
       
        NULL]:

utils := [
        Anchor(TextBlock('a', name='utils',
           SectionHeader(1, 'Utility tools'))),
        Paragraph(0, 'OMA standalone ships with a few additional utility tools 
        to simplify working with OMA. We briefly introduce them here. All tools 
        are shell script located in OMA''s bin directory. All tools provide some
        additional help information with the command line option ', TT('-h')),

        Anchor(TextBlock('a', name='cleanup', SectionHeader(2, 'oma-cleanup'))),
        Paragraph(0, 'In case a few processes to compute the all-vs-all get 
        prematurly terminated or killed for whatever reason, they usually leave
        back lock files that need to be removed. ', Code('oma-cleanup'), ' is 
        a simple shell script that removes all of the lock files. Before using
        this tool, make sure that no OMA process is still running.'),

        Anchor(TextBlock('a', name='status', SectionHeader(2, 'oma-status'))),
        Paragraph(0, 'The parallel all-vs-all phase of OMA standalone can take 
        quite a lot of time to compute and for the process themselves it is rather
        difficult to estimate how far the overall progress advanced already. We 
        therefore provide a tool that reports the overall progress of the all-vs-all
        phase with the following command: ', Code('oma-status'), 'Note also the 
        command line options of the tool that can give you extended reporting,
        parallel calculations, etc. You can run ', TT('oma-status'), ' also while
        computations are still ongoing.'), 

        Anchor(TextBlock('a', name='compact', SectionHeader(2, 'oma-compact'))),
        Paragraph(0, 'The all-vs-all phase can produce a huge amount of files, 
        specially for big genomes. On many HPC clusters users have restrictions
        on the number of files that can be stored. ', TT('oma-compact'), ' is a 
        utility tool that will compact the Cache/AllAll directory of finished 
        genome pairs to just a single file per pair:',
        Code('oma-compact'), 'The tool can be started repeatetly and also during
        ongoing computations.'),
        NULL ]:
        
# INPUT FORMATS
iformat := [ 
            Anchor(TextBlock('a', name='iformat', 
                SectionHeader(2, 'Input Files'))
            ),
            Paragraph(0, 'OMA uses two different input formats: FASTA files for 
            genome input and a Darwin file for parameter input.'),
            
            Paragraph(0, 'The Fasta format is explained in detail on ',
                Link(
                    TextBlock('a', 
                        href='http://en.wikipedia.org/wiki/FASTA_format',
                        'wikipedia'
                    )
                ), '.'
            ),
            
            Paragraph(0, 'As almost everywhere else, OMA uses the greater-than 
            symbol ">" to distinguish labels from sequences. Each sequence 
            in a genome is supposed to have its own label. Have a look at the 
            FASTA files included in ToyExample/DB in our installer package for 
            some example files.'),

            Paragraph(0, 'In case your genomes contain multiple alternative 
            splicing variants, you can add a text-based file per genome called',
            TT('DB/{YourGenome}.splice'), 'that put together the different
            splicing variants, e.g. to indicate that the three splicing variants
            ENSP00000384207, ENSP00000263741 and ENSP00000353094 are encoded by the 
            same gene, add the following line to the splice file:'),
            Paragraph(0, Code('ENSP00000384207; ENSP00000263741; ENSP00000353094'),
            'OMA requires that the individual IDs are unique prefixes of your 
            FASTA headers.'),
            
            Paragraph(0, 'Poor quality genomes often suffer from truncated gene 
            models. If you name the FASTA files of poor quality genomes ',
            TT('{YourGenome}.contig.fa'), ', they are treated specially: OMA will
            ignore the ', 
            Anchor(TextBlock('a', href='parameters', TT('LengthTol'))),
            'condition, such that orthology will also be established for 
            none-full-length homologous pairs, i.e. the condition that the 
            fraction of the length of the effective pairwise alignment 
            divided by the length of the shorter sequences must be at least ', 
            TT('LengthTol'),' is ignored. For ESPRIT, genomes labeled 
            with the ', TT('.contig.fa'), '-extension are considered for 
            searching for split genes.'),

            Paragraph(0, 'Parameter files use Darwin syntax.  Key-value-pairs 
            are written as'),
            
            Paragraph(0, Code('key := value;')),
            
            Paragraph(0, 'Note the colon in ', TT(':='), ' and the semicolon at 
            the end of the line. If your parameter file does not use valid 
            Darwin syntax, OMA will print out a short message and stop its 
            execution.')
            ]:

# OUTPUT FORMATS
oformat := [ Anchor(TextBlock('a', name='oformat',
                SectionHeader(2, 'OMA Output Files')
            )),
            
            Paragraph(0, 'The output of OMA gets written to files stored in a 
            directory ', TT('Output'), ' in your working directory. This can 
            be changed by changing the ', TT('OutputFolder'), ' parameter, 
            There are text files and directories organized as described in 
            Table 1. If not all output files are needed, note that the 
            production of some of them can be disabled (see Table 4 below).'),
            
            Table( hastitlerow, long, ColAlign('l', 'p{10cm}'),
                    title = 'Table 1: Contents of the OMA output files',
                    Row(Bold('Filename or Directory'), Bold('Contents')),
                    Rule,
                    Row(TT('Map-SeqNum-ID.txt'), 
                        Paragraph(0, 'Lists all genes of all datasets  
                    with their unique sequence number and the labels read from
                    the FASTA files.')),
                    Row(TT('OrthologousGroups.txt'), 
                        Paragraph(0, 'The groups of orthologs are
                    given as one per row, starting with a unique group
                    identifier, followed by all group members, all separated
                    by tabs.')),
                    Row(TT('OrthologousMatrix.txt'), 
                        Paragraph(0, 'More compact version of ',
                    TT('OrthologousGroups.txt'), '. The groups of orthologs
                    are given as matrix with group per row and one genome
                    per tab-separated column. Numbers refer to entry number as
                    listed in the file ', TT('Map-SeqNum-ID.txt'), '.')),
                    Row(TT('OrthologousGroups.orthoxml'), 
                       Paragraph(0,'The OMA groups of orthologs stored in ',
                       Link(TextBlock('a', 
                          href='http://orthoxml.org',
                          'orthoxml format')),'.')),
                    Row(TT('OrthologousGroupsFasta/'), 
                    Paragraph(0, 'Each OMA group is provided as a separate
                    Fasta file, with the species name as identifer. This
                    format is particularly suitable as starting point for
                    a phylogenetic reconstruction.')),
                    Row(TT('PairwiseOrthologs/'), 
                       Paragraph(0, 'The textfiles in ', TT('Output/PairwiseOrthologs'), 
                    ' are named according to ', TT('{genome a}-{genome b}.txt'),
                    ' and consist of a list of pairwise orthologs for the two given
                    genomes. Every pair is listed only once, and in no particular
                    order. Each line in the file contains one pair; all fields are 
                    separated by tabs. In the first two field, the unique IDs of the
                    proteins are given. The next two fields contain the labels of
                    the proteins, and in the last two fields, the type of orthology
                    and (if any) the OMA group is given.')),
                    Row(TT('OrthologousPairs.orthoxml'), 
                       Paragraph(0,'The pairwise orthologs stored in ',
                       Link(TextBlock('a', 
                          href='http://orthoxml.org',
                          'orthoxml format')),'. Each group in the file will have
                          orthologs between genes from only two genomes.')),
                    Row(TT('HierarchicalGroups.orthoxml'), 
                       Paragraph(0, 'The hierarchical groups of orthologs
                    in OrthoXML format. A detailed description of how
                    these groups are computed is forthcoming.')),
                    Row(TT('EstimatedSpeciesTree.nwk'), 
                       Paragraph(0, 'The inferred species tree on which 
                    the hierarchical groups inference procedure is based,
                    in Newick format.')),
                    Row(TT('HOGFasta/'), 
                    Paragraph(0, 'For each top-level HOG group we provide a
                    separate Fasta file with all protein sequences clustered
                    to it. This format is particularly suitable as starting 
                    point for a phylogenetic reconstruction of a gene tree.')),
                    Row(TT('used_splicing_variants.txt'),
                    Paragraph(0, 'If ',TT('UseOnlyOneSplicingVariant'), 'is activated and
                    splicing information is available, the variant which has been used 
                    for calling the orthologous relations is stored in this file.
                    The format is a tab-delimited text file with the species in the 
                    first column and the id of the used splicing variant in the second column.')),
                    Row(TT('gene_function.gaf'),
                       Paragraph(0, 'The predicted Gene Ontology function assignments
                    as a gaf formatted file. The file is only created if ',
                    TT('DoGroupFunctionPrediction'), ' is set to ',TT('true'),' in the 
                    parameter file and at least some exported genomes with GO 
                    annotations are included in the analysis.')),
                    NULL
            )
            
           ]:

# PARAMETERS
parameters := [ Anchor(TextBlock('a', name='parameters',
                    SectionHeader(1, 'Parameters')
                )),
                
                Paragraph(0, 'All parameters for OMA and ESPRIT are
                set in a parameters file. There is an example file in the
                OMA installer package; we encourage you to copy this file
                into your working directory and change it to your needs, or use
                the command ', TT('OMA -p'), ' to create a default parameters 
                file.'),

                Paragraph(0, 'The parameter file consists of three main parts:
                First, general parameters for OMA are set. Table 3 describes 
                these parameters in detail.'),

                Paragraph(0, 'Next, there are a few optional
                parameters, listed in Table 4, to avoid producing particular 
                output files. Indeed, in large analyses, disabling the 
                generation of unused output might save a substantial amount of 
                computing time and might drastically reduce the number of 
                produced files. '),

                Paragraph(0, 'The third part are the parameters which are unique
                to ESPRIT. Check the ', 
                Anchor(TextBlock('a', href='esprit', 'ESPRIT section')), 
                ' for details on them.'),

                Table( hastitlerow, long, ColAlign('l', 'p{9cm}', 'p{2cm}'),
                    title = 'Table 3: General parameters in OMA',
                    Row(Bold('Parameter'), Bold('Meaning'), Bold('Default')),
                    Rule,
                    Row(TT('InputDataType'),
                        Paragraph(0, 'Type of input sequences. This can be set
                        either to ''AA'' for amino acid sequences or ''DNA'' for
                        nucleotide sequences'),
                        TT('AA')),
                    Row(TT('OutputFolder'), 
                        Paragraph(0, 'Folder to which the output is written. At
                        each run, the content of this folder will be overwritten.
                        Don''t store any important files in it. The ', TT('OutputFolder'),
                        'must not contain any spaces.'),
                        TT('Output')),
                    Row(TT('ReuseCachedResults'), 
                        Paragraph(0, 'If you want to recompute everything from
                        scratch everytime the script is run, set this to ',
                        TT('false'), '.'),
                        TT('true')),
                    Row(TT('AlignBatchSize'),
                        Paragraph(0, 'In the all-against-all phase, each genome
                        pair is split in smaller chunks of ',TT('AlignBatchSize'), 
                        'protein comparisons. The larger this number, the longer 
                        each unit runs, and the fewer files get produced. This 
                        allows to adjust the frequency of milestone steps 
                        (e.g. in case of computer crash) or to process few but 
                        large genomes with many CPUs efficiently.'),
                        TT(1000*1000)),
                    Row(TT('MinScore'), 
                        Paragraph(0, 'Alignments which have a score lower than ',
                        TT('MinScore'), ' will not be considered. The scores
                        are in Gonnet PAM matrices units.' ),
                        TT('181')),
                    Row(TT('LengthTol'), 
                        Paragraph(0, 'Length tolerance ratio. If the length of
                        the effective alignment is less than ', 
                        TT('LengthTol'), ' * min( length(s1), length(s2) ), then 
                        the alignment is not considered.'),
                        TT('0.61')),
                    Row(TT('StablePairTol'), 
                        Paragraph(0, 'During the stable pair formation, if a
                        pair has a distance provable higher than another pair
                        (i.e. ', TT('StablePairTol'), ' standard deviations
                        away) then it is discarded.'),
                        TT('1.81')),
                    Row(TT('VerifiedPairTol'), 
                        Paragraph(0, 'Tolerance parameter for the detection of 
                        differential gene losses using a third genome. The larger 
                        the tolerance, the liberaler the algorithm assigns 
                        orthologous relations. A detailed description is provided ',
                        Link(TextBlock('a', 
                           href='http://nar.oxfordjournals.org/content/34/11/3309.full', 
                           'here.'))),
                        TT('1.53')),
                    Row(TT('MinSeqLen'),
                        Paragraph(0, 'Any sequence which is less than ',
                        TT('MinSeqLen'), ' amino acids long in regular genomes
                        is not considered.'),
                        TT('50')),
                    Row(TT('UseOnlyOneSplicingVariant'),
                        Paragraph(0, 'Enables/disables the filtering on a single represetative 
                        splicing variant. If enabled, OMA selects the variant that has the most 
                        homologous matches with all other genomes. Orthology inference is then 
                        only based on this variant. If disabled, alternative splicing variants 
                        will usually be infered as paralogs.'),
                        TT('true')),
                    Row(TT('StableIdsForGroups'),
                        Paragraph(0, 'Enables/disables the generation of stable identifiers for OMA groups 
                        (and Hierarchical Groups if the top-down algorithm is selected). The identifier consists of 
                        a prefix to determine the type of the group (''OMA'' or ''HOG''), and a subsequence
                        of the amino acid sequence uniquely present in this group. The computation of these 
                        ids might require a substantial amount of time. The ids are stored in the OrthoXML
                        files only.'),
                        TT('false')),
                    Row(TT('GuessIdType'),
                       Paragraph(0, 'Enable/disable guessing of the id types while generating the orthoxml
                       file. In this context we refer to ID type guessing as the task to
                       gussing whether an ID should be stored in the geneId, protId or
                       transcriptId tag. If the flag is set to false, the whole fasta header
                       is used and stored as is in the protId tag.'),
                       TT('false')),

                    Row(TT('DoHierarchicalGroups'),
                       Paragraph(0, 'Enables/disables and selects the algorithm to compute the 
                       hierarchical orthologous groups (HOGs). Valid parameters are ',TT('false'),', ', 
                       TT('''top-down'''),' and ', TT('''bottom-up'''), '. The top-down approach was the 
                       only algorithm until OMA standalone 2.0. The bottom-up approach is as of now still
                       an experimental feature, but will become the default choice in the future.'), 
                       TT('''top-down''')),
                    Row(TT('MaxTimePerLevel'),
                       Paragraph(0, 'Define maximum amount of time (in sec) spent by 
                       the program for breaking every connected component of the 
                       orthology graph at its weakest link on a given taxonomic level. 
                       If set to a negative value, no timelimit is enforced.'),
                       TT('1200')),
                    Row(TT('SpeciesTree'),
                       Paragraph(0, 'The hierarchical groups require a (partially)
                       resolved species phylogeny. With the parameter ',
                       TT('SpeciesTree'), ' the user can specify 
                       a phylogeny in Newick-format, or, by setting the variable 
                       to "estimate", compute a species tree based on the OMA 
                       Groups and use this one.'), 
                       TT('estimate')),
                    Row(TT('ReachabilityCutoff'),
                       Paragraph(0,'The cutoff of "average reachability within 
                       two steps" defines up to what point a cluster is split 
                       into sub-clusters. This paramter applies only to the top-down HOG 
                       inference approach. See parameter ',TT('DoHierarchicalGroups'),' for 
                       additional information.'), 
                       TT('0.65')),
                    Row(TT('MinEdgeCompletenessFraction'),
                       Paragraph(0,'The cutoff in GETHOGs bottom-up algorithm to make an 
                       edge trusted in the orthology graph among HOGs. This parameter applies 
                       only to the bottom-up approach. See parameter ',TT('DoHierarchicalGroups'),
                       ' for additional information.'), 
                       TT('0.80')),
                    Row(TT('DoGroupFunctionPrediction'),
                       Paragraph(0, 'Compute Gene Ontology function predictions 
                       based on the OMA Groups assignments. The predictions are
                       then stored in a gaf file. Computing these predictions 
                       can take a substantial amount of time. ', 
                       Bold('Note: '), 'Predictions are based on transfering 
                       existing annotations from genomes. Only genomes exported
                       through the ', 
                       Link(TextBlock('a',href='https://omabrowser.org/export', 'OMA Browser export')),
                       ' interface have usable input annotations.'),
                       TT('true')),
                    Row(TT('GroupFunctionCutoff'),
                       Paragraph(0, 'Parameter to specify the fraction of genes in a 
                       group that need to be annotated with a GO term in order to propagate
                       the annotation to the unannotated group members. 
                       The parameter ensures that predictions are not 
                       propagated too liberally.
                       Note that it requires at least the specified fraction of 
                       genomes to be exported from the OMA Browser.'),
                       TT('0.5')),
                    Row(TT('CladeDefinition'),
                       Paragraph(0, 'Path to tab-seperated file that provides a mapping
                       from the species names to the clade/group to which annotations
                       should at most be propagated. If set to ', TT('default'), ', the
                       algorithm infers a species tree an propages GO annotations to 
                       user genomes only within some predefined clades. These predifined
                       clades are ''Amphibia'', ''Archaea'', ''Arthropoda'', ''Bacteria'', 
                       ''Clupeocephala'', ''Dictyostelium'', ''Fungi'', ''Mammalia'', 
                       ''Nematoda'', ''Sauria'' and ''Viridiplantae''. If the parameter 
                       is set to ', TT('false'), ' or ', TT('none'), ', no limitations
                       on the clades are used to propagate the function annotations.'),
                       TT('default'))
                    ),

                Table( hastitlerow, ColAlign('l', 'p{9cm}', 'p{2cm}'),
                    title = 'Table 4: Output file parameters',
                    Row(Bold('Parameter'), Bold('Meaning'), Bold('Default')),
                    Rule,
                    Row(TT('WriteOutput_PairwiseOrthologs'),
                       Paragraph(0,'Switches to disable the generation of 
                       pairwise ortholog output files if set to ',
                       TT('false'), '.'),
                       TT('true')),
                    Row(TT('WriteOutput_OrthologousPairs_orthoxml'),
                       Paragraph(0,'Switches to disable the generation of the 
                       pairwise ortholog output file in OrthoXML format if set 
                       to ',TT('false'),'.'),
                       TT('true')),
                    Row(TT('WriteOutput_OrthologousGroupsFasta'),
                       Paragraph(0,'Switches to disable the generation of 
                       orthologous group output files (Fasta format, one 
                       file per group) if set to ',TT('false'),'.'),
                       TT('true')),
                    Row(TT('WriteOutput_HOGFasta'),
                       Paragraph(0,'Switches to disable the generation of 
                       hierarchical orthologous group files (Fasta format, one 
                       file per group) if set to ',TT('false'),'.'),
                       TT('true')),
                    Row(TT('WriteOutput_PhyleticProfileOG'),
                       Paragraph(0,'Switch to disable the generation of the
                       phyletic profiles based on the orthologous groups if set 
                       to ', TT('false'),'.'),
                       TT('true')),
                    Row(TT('WriteOutput_PhyleticProfileHOG'),
                       Paragraph(0, 'Switch to disable the generation of the 
                       phyletic profiles based on the root level HOGs if set
                       to ', TT('false'),'.'),
                       TT('true'))
                )];

applications := [Anchor(TextBlock('a', name='applications', 
                        SectionHeader(1, 'Applications for OMA standalone'))),
          Paragraph(0, 'In this section we provide a few hints on best practices 
          on how to use OMA standalone results in possible applications.'),

          Anchor(TextBlock('a', name='speciestreeinference',
                           SectionHeader(2, 'Species tree reconstruction'))),
          Paragraph(0, 'The most common approach to reconstruct a species 
          phylogeny is to build a supermatrice from many marker loci. For this
          is is of outmost importance to avoid paralogous relations within each
          loci. OMA Groups (or simply Orthologous Groups) is the most suitable 
          type of output. Each group forms a maximum clique in the graph of 
          pairwise orthologs. OMA standalone builds provides also a directory 
          called ', IT('OrthologousGroupsFasta'), ', that contains for each group
          a fasta formatted file with their unaligned sequences.'),

          Paragraph(0, 'A standard approach would therefore be to build a MSA 
          for each of the marker gene groups, concatenate it and infer a tree 
          from the superalignment.'),

          Anchor(TextBlock('a', name='functionpredict', 
                           SectionHeader(2, 'Predict gene functions of a new genome'))),
          Paragraph(0,'OMA can be used to annotate the function of proteins from 
          a new genome / proteome using existing gene ontology annotations from 
          other species in OMA. OMA propagates annotations based on shared OMA 
          group membership - the details are explained in ', 
          Link(TextBlock('a', href='http://dx.doi.org/10.1093/nar/gku1158', 'this paper')),
          '. For this to work, you need to export a few relevant and well annotated
          genomes from the OMA Browser. By adding your own proteome to the dataset,
          and running OMA standalone, your output directory will eventually contain a gaf 
          formatted annotations file named ', IT('gene_function.gaf'), '.'),
          Paragraph(0, 'As not all annotation terms make sense in all domains
          of life, the parameter ',TT('CladeDefinition'), ' can be used to limit 
          the propagation to the certain parts of the tree of life. ', 
          IT('TODO: I guess we should explain how and what is the format of the optional file')),

          Anchor(TextBlock('a', name='evolanalysis',
                           SectionHeader(2, 'Dynamics of Genome Evolution'))),
          Paragraph(0, 'The Hierarchical Orthologous Groups (HOGs) of OMA capture
          the dynamics of genome evolution, i.e. the joint evolutionary events
          acting on the set of species under consideration. The model of OMA tries 
          to explain the evolutionary history using speciations, duplications 
          and losses. HOGs are groups of genes that descended from a single 
          ancestral gene at a specific taxonomic level. OMA standalone will 
          computed these nested groups and store them in the community standard ',
          Link(TextBlock('a', href='http://www.orthoxml.org/', 'OrthoXML')), 
          ' format. The output file is called ', IT('HierarchicalGroups.orthoxml'), '.'),
          Paragraph(0, 'The root-level grouping provides something similar as a 
          homologous group. As this specific grouping can be useful in itself,
          OMA standalone produces for each root-level HOG a fasta file in a 
          subdirectory named ', IT('HOGFasta'), '.'),
          Paragraph(0, 'For more complicated analyses of the evolutionary dynamics, 
          extracting groups at specific taxonomic levels, creating a phylostratetic 
          analysis and many more things, we developed the special purpose tool ',
          Link(TextBlock('a', href='https://github.com/DessimozLab/pyham', 'pyHAM')),
          ' to work with orthoxml files.'),

          NULL]:

esprit := [Anchor(TextBlock('a', name='esprit', SectionHeader(1, 'ESPRIT'))),
           Paragraph(0, 'ESPRIT can be used to identify split genes in low 
           quality genomes. In essence, it tries to find genes in genomes named ',
           TT('{YourGenome}.contig.fa'), ' for which evidence full length gene 
           exist in other genomes. See ', 
           Link(TextBlock('a', href='http://dx.doi.org/10.1093/bib/bbr038', 'http://dx.doi.org/10.1093/bib/bbr038')),
           ' for details on the methodology. '),

           Anchor(TextBlock('a', name='espritparams', SectionHeader(2, 'Esprit Parameters'))),
           Paragraph(0, 'ESPRIT also needs to operate on computed all-vs-all 
           alignments. It therefore shares all the parameters from OMA that 
           are relevant to the all-vs-all phase, which are ', 
           TT('InputDataType'), ', ', TT('AlignBatchSize'), ', ', TT('MinScore'),
           ', ', TT('MinSeqLen'), ', and ', TT('LengthTol'), '.'),

           Paragraph(0, 'The more specific parameters that only 
           affect the ESPRIT algorithm are explained in Table 5.  Note that
           changing the ESPRIT parameters will not have an effect unless you 
           set the boolean variable ',
           TT('UseEsprit'), ' to ', TT('true'), '.'),

           Table( hastitlerow, ColAlign('l', 'p{9cm}', 'p{2cm}'),
               title = 'Table 5: ESPRIT parameters',
               Row(Bold('Parameter'), Bold('Meaning'), Bold('Default')),
               Rule,
               Row(TT('UseEsprit'), 
                   Paragraph(0, 'You can either set this to ', TT('true'),
                   ', which will enable ESPRIT and shut down the parts of
                   OMA that are not directly needed for ESPRIT, or set it
                   to ', TT('false'), ' to make no use of ESPRIT at all.'),
                   TT('false')),
               Row(TT('DistConfLevel'),
                   Paragraph(0, 'Confidence level variable for contigs.
                   This is the parameter ', TT('tol'), ' described in the
                   paper.'),
                   TT('2')),
               Row(TT('MinProbContig'),
                   Paragraph(0, 'Minimal proportion of genomes with which
                   contigs form many:1 BestMatches to consider that we
                   might be dealing with fragments of the same gene.
                   This is the parameter ', TT('MinRefGenomes'), 
                   ' described in the paper, normalized by the total
                   number of reference genomes.'),
                   TT('0.4')),
               Row(TT('MaxContigOverlap'),
                   Paragraph(0, 'Maximum overlap between fragments of
                   same gene from different contigs.'),
                   TT('5')),
               Row(TT('MinSeqLenContig'),
                   Paragraph(0, 'Any sequence which is less than ',
                   TT('MinSeqLenContig'), ' amino acids long in contigs
                   is not considered.'),
                   TT('20')),
               Row(TT('MinBestScore'),
                   Paragraph(0, 'Minimum best score for BestMatch in
                   scaffold recognition.'),
                   TT('250'))
          ),

          Anchor(TextBlock('a', name='espritout',
                SectionHeader(2, 'ESPRIT Output')
            )),
            
            Paragraph(0, 'ESPRIT stores its output files in a directory called',
            TT('EspritOutput'), ' in your working directory. The output
            consists of three text files and one tarball. In the tarball,
            FASTA files with the MSAs of the hits ESPRIT found are stored.
             The other three files are explained in detail in Table 2.'),
            
            Table( hastitlerow, ColAlign('l', 'p{12cm}'),
                title = 'Table 2: Contents of the ESPRIT output files',
                Row(Bold('Filename'), Bold('Contents')),
                Rule,
                Row(TT('params.txt'),
                    Paragraph(0, 'This file is kept as a reference and 
                    contains all parameters used in the current run.')),
                Row(TT('hits.txt'),
                    Paragraph(0, 'All hits found by ESPRIT are listed in this
                    file. It is a list of contigs, ordered according to their
                    position relative to the putative ortholog. Each line 
                    describes one contig, the fields are separated by tabs.
                    In the first field, the fragment pair ID is printed; the
                    next two fields contain the labels of the first and
                    second fragments found in this hit. The forth and fifth 
                    fields contain the label of the corresponding full gene
                    and its genome name. Then follows the distance difference
                    between the two fragments and the number of positions
                    between them (i.e. the gap); at last, an array is listed
                    containing the IDs of all s3 genes corresponding to this
                    hit.')),
                Row(TT('dubious.txt'),
                    Paragraph(0, 'ESPRIT often detects more candidate pairs than
                    it will list in the ', TT('hits.txt'), ' file, but not all
                    of them survive the quality check. Still, if you want to
                    see which triplets have been filtered out, have a look at ',
                    TT('dubious.txt'), ' where they are still listed. The file
                    format is the same as for ', TT('hits.txt'), '.'))
            )
 
          ]:

# GETTING HELP

gettinghelp := [ Anchor(TextBlock('a', name='gettinghelp',
                SectionHeader(1, 'Getting help')
            )),
            
            Paragraph(0, 'The preferred way to get help about OMA is via the 
            ', Link(TextBlock('a',href='https://www.biostars.org/t/oma/', 
            'Biostars')), ' community resource. Please consider asking your 
            question there, including the tags "OMA" and "orthologs".'),
            Paragraph(0, 'If your question requires privacy, we are also 
            reachable by email at contact@omabrowser.org. ' )
            ]:

# LICENSE
license := [ Anchor(TextBlock('a', name='license',
                SectionHeader(1, 'License')
            )),
            
            Paragraph(0, 'OMA standalone is licensed under the Mozilla 
Public License Version 2.0. For more info, please consult the following page:'),
            
            Paragraph(0,Link(
                TextBlock('a',
                href='http://www.mozilla.org/MPL/2.0/',
                'http://www.mozilla.org/MPL/2.0/')
            )),
            
            Paragraph(0, 'In a nutshell, OMA standalone is open source and 
free for commercial and non-commercial use.'),

            Paragraph(0, 'Software distributed under the License is 
distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
express or implied. See the License for the specific language governing 
rights and limitations under the License.')


            ]:


# JAVASCRIPTS FOR GOOGLE
googlejs1 := TextBlock('script', type='text/javascript',
  'var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
   document.write(unescape("%3Cscript src=''" + gaJsHost + "google-analytics.com/ga.js'' type=''text/javascript''%3E%3C/script%3E"));'
   ):
googlejs2 := TextBlock('script', type='text/javascript',
            'try {
       var pageTracker = _gat._getTracker("UA-1093824-1");
        pageTracker._trackPageview();
	 } catch(err) {}'
            ):


# CONTENT TABS FOR HTML
htmltabs := TextBlock('div', class='navigation',
                Anchor(TextBlock('a', href='introduction', 'Introduction')),
                ' - ',
                Anchor(TextBlock('a', href='downloads', 'Downloads')),
                ' - ',
                Anchor(TextBlock('a', href='installation', 'Installation')),
                ' - ',
                Anchor(TextBlock('a', href='usage', 'Usage')),
                ' - ',
                Anchor(TextBlock('a', href='applications', 'Applications')),
                ' - ',
                Anchor(TextBlock('a', href='fileformats', 'File formats')),
                ' - ',
                Anchor(TextBlock('a', href='parameters', 'Parameters')),
                ' - ',
                Anchor(TextBlock('a', href='esprit', 'Esprit')),
                ' - ',
                Anchor(TextBlock('a', href='gettinghelp', 'Getting help')),
                ' - ',
                Anchor(TextBlock('a', href='license', 'License')),
                ' - ',
                Link(TextBlock('a', href='http://omabrowser.org', 'Omabrowser'))
            ):


##############################################################################
# create and write the documents
#

# Create one section 'File Formats'
formats := [ Anchor(TextBlock('a', name='fileformats',
                SectionHeader(1, 'File Formats')
             )),
                op(iformat),
                op(oformat)
            ]:

# LaTeX output
OpenWriting('Manual/manual.tex'):
    prints('% Do not modify this file. It has been automatically ');
    prints('% created from manual.drw');
    prints('\\documentclass[a4paper,10pt]{scrartcl}');
    prints('\\usepackage[margin=2cm]{geometry}');
    #prints( LaTeXC(DocEl('documentclass', 'scrartcl') ) ):
    prints( LaTeXC(DocEl('usepackage', 'hyperref') ) ):
    prints( LaTeXC(DocEl('usepackage', 'longtable') ) ):
    prints( LaTeXC(DocEl('hypersetup', 'colorlinks,
citecolor=blue,
filecolor=blue,
linkcolor=blue,
urlcolor=blue') ) ):
    prints( '\\renewcommand*{\\figureformat}{}
\\renewcommand*{\\tableformat}{}
\\renewcommand*{\\captionformat}{}' );
    prints( LaTeXC(DocEl('title', pagetitle)) . '\n' ):
    prints( LaTeXC(DocEl('author', 'CBRG, ETHZ')) . '\n' ):
    prints( LaTeXC(DocEl('date', '')) . '\n' ):
    prints( '\\renewcommand{\\familydefault}{\\sfdefault}' ):
    prints( LaTeXC(DocEl('begin', 'document')) . '\n' ):
    prints( '\\maketitle\n' ):
    prints( '\\tableofcontents\n' ):
    prints( LaTeXC( Document( 
        op(intro),
        op(downloads),
        op(install),
        op(usage),
        op(utils),
        op(applications),
        op(formats),
        op(parameters),
        op(esprit),
        op(gettinghelp),
        op(license)
    ) ) ):
    prints( LaTeXC( DocEl('end', 'document')) . '\n' ):
OpenWriting( previous ):
# Create PDF: call pdflatex twice to make sure toc gets built
CallSystem('cd Manual && pdflatex manual.tex'):
CallSystem('cd Manual && pdflatex manual.tex'):


# HTML output

omabrowsercss := TextBlock('link', href='../browser.css',
            rel='stylesheet', type='text/css'):

additionalcss := TextBlock('link', href='manual.css',
            rel='stylesheet', type='text/css'):


OpenWriting('Manual/manual.html'):
    prints(HTML(Document(
            googlejs1,
            googlejs2,
            TextBlock('div', class='content',
                TextBlock('div', class='title', pagetitle),
                htmltabs,
                op(intro),
                op(downloads),
                op(install),
                op(usage),
                op(utils),
                op(applications),
                op(formats),
                op(parameters),
                op(esprit),
                op(gettinghelp),
                op(license)
            )
        ), pagetitle, css1=omabrowsercss, css2=additionalcss, title=false)):
OpenWriting(previous):

done
