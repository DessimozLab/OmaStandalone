#!/bin/bash

# $OMA_PATH points to the folder containing the current
# version of OMA.
OMA_PATH=$(dirname $0)/..
# convert relative to absolute path
if [ ${OMA_PATH:0:1} != "/" ]
then
    OMA_PATH="$PWD/$OMA_PATH"
fi


usage(){
cat << EOF
$0 - runs OMA standalone

$0 [options] [paramfile]

The all-against-all Smith-Waterman alignment step of OMA requires 
a lot of CPU time. OMA standalone can therefore be run in parallel.
If you intend to use OMA standalone on a HPC cluster with a LSF 
or SunGridEngine scheduler, you should use the jobarray option,
e.g. bsub -J "oma[1-500]" $0 (on LSF).
     qsub -t 1-500 $0 (on SunGridEngine)
In case you run OMA on a single computer with several cores, use 
the -n option.

options:
  -n <number>   number of parallel jobs to be started on this computer
  -v            version
  -d <level>    increase debug info to <level>. By default level is set to 1.
  -i            interactive session, don't quit in case of error and at end.
  -h/?          this help

paramfile       path to the parameter file. it defaults to ./parameters.drw
EOF
}

paramerror="

I found an error in your parameter file.
Most probably, you missed a semicolon at the end of a line.

Please fix it and try again."

pfile="./parameters.drw"
wdir="./"
dbglevel="1"
NProc="1"
localParallel="0"
darwin_flag="-E -q"
interactive=""
while getopts "hn:vd:i" opt ; do
    case $opt in 
    h) usage
         exit 0
         ;;
    n)   NProc="$OPTARG"
         if ! [[ $NProc =~  ^[1-9][0-9]*$ ]] ; then
             echo "-$opt requires positive integer as argument" >&2
             usage
             exit 1
         fi
         localParallel=1
         ;;
    d)   dbglevel="$OPTARG"
         if ! [[ $dbglevel =~  ^[1-9][0-9]*$ ]] ; then
             echo "-$opt requires positive integer as argument" >&2
             usage
             exit 1
         fi
         ;;
    v)   echo "OMA version [VERSIONNR]"
         exit 0
         ;;
    i)   darwin_flag=""
         interactive="1"
         ;;
    \?)  echo "invalid option" >&2
         usage
         exit 1
         ;;
    :)   echo "option -$OPTARG requires an argument" >&2
         usage
         exit 1
         ;;
    esac
done
shift $((OPTIND-1))
echo $@

if [ -n "$1" ] ; then 
    pfile="$1"
fi

if [ ! -e $pfile ] ; then
    echo "Could not find parameter file!" >&2
    exit 1
fi

if [[ -n "$interactive" && $localParallel == "1" && $NProc -gt "1" ]]; then
    echo "interactive mode only possible without parallelism."
    exit 1
fi

set -o monitor
trap cleanup EXIT

cleanup() {
    children=$(jobs -lp)
    if [ -n "$children" ];then
        kill $children
    fi
}

drw_cmds=$(cat << EOC
libdir := '$OMA_PATH/lib/': 
e := traperror(eval(parse(ReadRawFile('$pfile')))): 
if e=lasterror then print('$paramerror'): exit(1): fi: 
printlevel := $dbglevel: 
OMA_STANDALONE_VERSION := '[VERSIONNR]': 
ReadProgram('$OMA_PATH/OMA.drw'):
EOC
)

cat $OMA_PATH/lib/splashscreen.txt
if [ -n "$interactive" ] ; then
    # run interactive, i.e. no background 
    $OMA_PATH/bin/omadarwin ${darwin_flag} << EOA
    $drw_cmds
EOA
else
    for pNr in $(eval echo {1..${NProc}}) ; do
        if [ "$localParallel" -gt 0 ] ; then
            OneMachineParallelInfo="NR_PROCESSES := $NProc; THIS_PROC_NR := $pNr;"
        fi
        $OMA_PATH/bin/omadarwin ${darwin_flag} << EOF &
        ${OneMachineParallelInfo}
        $drw_cmds
        done;
EOF
    done
    wait
fi
